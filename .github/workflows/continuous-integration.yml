name: CI

on:
  push:
    branches: 'main'
  pull_request:
    branches: 'main'

env:
  CARGO_TERM_COLOR: always

jobs:
  multiplatform-tests:
    name: Testing on Rust ${{ matrix.rust }} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - { rust: stable,            os: ubuntu-latest }
        - { rust: nightly,           os: ubuntu-latest }
        - { rust: stable,            os: macos-latest }
        - { rust: stable,            os: windows-latest }

    steps:
      - name: Make the USER own the working directory
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo chown -R $USER:$USER ${{ github.workspace }}
      
      - uses: actions/checkout@v3

      - name: docker-compose
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: docker-compose -f ./docker/docker-compose.yml up -d 

      - name: Caching cargo dependencies
        id: project-cache
        uses: Swatinem/rust-cache@v2

      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}

      - name: Run all tests, UNIT and INTEGRATION for Linux targets
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cargo test --verbose --workspace --all-features --no-fail-fast -- --show-output --test-threads=1

      - name: Run UNIT tests with no external connections for the rest of the defined targets
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: cargo test --verbose --workspace --exclude tests --all-features --no-fail-fast -- --show-output
  
  # sanitizer-test:
  #   name: Test with -Zsanitizer=${{ matrix.sanitizer }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       sanitizer: [address, memory, thread, leak]
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Caching Rust dependencies
  #       id: project-cache
  #       uses: Swatinem/rust-cache@v2

  #     - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
  #       uses: hecrj/setup-rust-action@v1
  #       with:
  #         rust-version: nightly
  #         components: rust-src

  #     - name: Test with sanitizer
  #       env:
  #         RUSTFLAGS: -Zsanitizer=${{ matrix.sanitizer }}
  #         RUSTDOCFLAGS: -Zsanitizer=${{ matrix.sanitizer }}
  #         # only needed by asan
  #         ASAN_OPTIONS: detect_stack_use_after_return=1
  #         # Asan's leak detection occasionally complains
  #         # about some small leaks if backtraces are captured,
  #         # so ensure they're not
  #         RUST_BACKTRACE: 0
  #     run: |
  #       cargo test -Zbuild-std --verbose --target=x86_64-unknown-linux-gnu --no-default-features
  #       cargo test -Zbuild-std --verbose --target=x86_64-unknown-linux-gnu --all-features